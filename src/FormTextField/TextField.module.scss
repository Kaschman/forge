@import 'node_modules/@combine-labs/combine-polaris/styles/foundation';
@import 'node_modules/@combine-labs/combine-polaris/styles/shared';

$backdrop-horizontal-spacing: spacing(tight) * 1.5;
$addon-horizontal-spacing: rem(6px);
$spinner-icon-size: rem(12px);

$stacking-order: (
  contents: 20,
  backdrop: 10,
);

.TextField {
  @include text-style-input;
  position: relative;
  display: flex;
  align-items: center;
  color: color('ink', 'lightest');
  cursor: text;
}

.minimal .Input:not(:focus) {
  ~ .Backdrop {
    background: none;
    border-color: transparent;
  }
}

.hasValue {
  color: color('ink');
}

.focus > .Input,
.Input:focus {
  outline: none;
  border: border(transparent);

  // stylelint-disable-next-line selector-max-class, selector-max-combinators
  ~ .Backdrop {
    background: white;
    border-color: color('blue');
    box-shadow: 0 0 0 2px rgba(color('blue'), 0.25);
  }
}

.error {
  .Input::placeholder {
    color: rgba(color('ink'), 0.4);
  }

  // stylelint-disable-next-line selector-max-class, selector-max-combinators
  > .Input ~ .Backdrop {
    background-color: color('red', 'lighter');
    border-color: color('red');
    box-shadow: none;
  }

  // We need this to override the box-shadow in the focus state.
  // stylelint-disable-next-line selector-max-class, selector-max-specificity, selector-max-combinators
  > .Input:focus ~ .Backdrop {
    border-color: color('blue');
    box-shadow: 0 0 0 2px rgba(color('blue'), 0.25);
  }
}

.disabled {
  color: color('ink', 'lightest');
  cursor: initial;

  > .Backdrop {
    background-color: color('sky', 'lighter');
    box-shadow: none;
  }
}

.Input {
  @include text-style-input;
  position: relative;
  z-index: z-index(contents, $stacking-order);
  display: block;
  flex: 1 1 0%;
  width: 100%;
  min-width: 0;
  min-height: control-height();
  margin: 0;
  padding: control-vertical-padding() $backdrop-horizontal-spacing;
  background: none;
  border-radius: border-radius();
  border: border(transparent);
  font-family: inherit;
  font-size: inherit;
  font-weight: inherit;
  appearance: none;

  .Prefix + & {
    padding-left: 0;
  }

  &:-webkit-autofill {
    box-shadow: inset 0 0 0 1000px rgba(color('yellow'), 0.1), inset 0 0 0 1000px white;
    border-color: color('yellow');
    &:focus {
      box-shadow: inset 0 0 0 1000px white;
      border-color: color('blue');
    }
  }

  &:disabled {
    background: none;
    border: border(transparent);
    color: currentColor;
    opacity: 1;
    -webkit-text-fill-color: currentColor;
  }

  // remove the box shadow in Firefox when the input is invalid
  &:invalid {
    box-shadow: none;
  }

  &::placeholder {
    color: color('ink', 'lightest');
  }

  // These properties are used to remove the default "spinner" controls
  // for number fields, since we add our own, custom versions instead.
  &[type='number'] {
    appearance: textfield;

    &::-webkit-outer-spin-button,
    &::-webkit-inner-spin-button {
      appearance: none;
      margin: 0;
    }
  }
}

.Input-suffixed {
  padding-right: 0;
}

.Backdrop {
  position: absolute;
  z-index: z-index(backdrop, $stacking-order);
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background: color('white');
  border: border(dark);
  box-shadow: 0 0 0 2px transparent;
  border-radius: border-radius();
  will-change: background, box-shadow, border-color;
  transition-property: background, box-shadow, border-color;
  transition-duration: duration();
  transition-timing-function: easing();
}

.Prefix {
  position: relative;
  z-index: z-index(contents, $stacking-order);
  flex: 0 0 auto;
  margin: 0 $addon-horizontal-spacing 0 $backdrop-horizontal-spacing;
  color: currentColor;
  pointer-events: none;
}

.Suffix {
  position: relative;
  z-index: z-index(contents, $stacking-order);
  flex: 0 0 auto;
  margin: 0 $backdrop-horizontal-spacing 0 $addon-horizontal-spacing;
  color: currentColor;
  pointer-events: none;
}
